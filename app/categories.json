{
  "Code organization and style": [
    "CRJVM205: Use `FetchType.LAZY` for collections on JPA entities to avoid loading unnecessary resources.",
    "CRJVM206: Minimize the N+1 selects problem by optimizing queries.",
    "CRJVM207: Ensure customer data includes end-of-life information.",
    "GCI1: Avoid calling Spring repositories inside loops or streams to reduce CPU and energy consumption.",
    "GCI2: Prefer switch statements over multiple if-else statements for better performance.",
    "GCI3: Fetch the size of collections outside loops to save CPU cycles.",
    "GCI4: Pass useful variables as arguments to routines to avoid unnecessary global variable checks.",
    "GCI66: Use single quotes for strings without variables to reduce CPU cycles.",
    "GCI67: Use the `$i++` variable during iteration to avoid temporary variable creation.",
    "GCI69: Avoid calling loop invariant functions in loop conditions to optimize performance.",
    "GCI72: Perform SQL queries outside loops to leverage server optimizations.",
    "GCI74: Specify fields in SQL queries instead of using `SELECT * FROM`.",
    "GCI75: Use `StringBuilder` for string concatenation in loops to save resources.",
    "GCI76: Avoid static collections; use final collections in singletons if necessary.",
    "GCI77: Use `Pattern.compile()` in static contexts to optimize performance.",
    "GCI78: Include const parameters in SQL queries to avoid unnecessary resource consumption.",
    "GCI79: Implement `try-with-resources` for `AutoCloseable` objects to free resources.",
    "GCI81: Specify struct layouts to optimize memory footprint.",
    "GCI82: Declare variables as constants when they are not reassigned.",
    "GCI83: Use `nameof` instead of `ToString()` for enums to improve performance.",
    "GCI84: Use `async Task` methods instead of `async void` for better performance, stability, and testability.",
    "GCI85: Seal types that don't need inheritance to enhance performance.",
    "GCI86: Avoid calling `GC.Collect` as it generally consumes more resources than it provides.",
    "GCI87: Use collection indexers instead of LINQ when available to optimize performance.",
    "GCI88: Dispose resources asynchronously if they implement `IAsyncDisposable`.",
    "GCI89: Limit the size of function caches to prevent storing unlimited data.",
    "GCI90: Use `Cast` instead of `Select` for casting to optimize performance.",
    "GCI91: Filter elements before sorting them to improve efficiency.",
    "GCI92: Use `string.Length` instead of comparing strings to an empty string for better performance and readability.",
    "GCI93: Return `Task` directly instead of a single `await` for optimized code.",
    "GCI94: Use `orElseGet` instead of `orElse` to save computing time.",
    "GCI95: Avoid querying unused SQL columns to optimize database performance."
  ],
  "Declaration": [
    "CRJVM????: Avoid joining on non-indexed columns in persistence Java.",
    "GCI22: Use basic operations directly instead of methods to save resources.",
    "GCI24: Limit the number of returned SQL results to optimize performance.",
    "GCI25: Ensure images have a valid source attribute to avoid unnecessary processing.",
    "GCI26: Use shorthand CSS notations to minimize stylesheet size.",
    "GCI27: Use `system.arraycopy` for copying arrays to optimize performance.",
    "GCI28: Optimize file reading exceptions to handle errors efficiently.",
    "GCI29: Avoid CSS animations to reduce energy consumption.",
    "GCI30: Provide print stylesheets to ensure proper printing.",
    "GCI31: Use lighter image formats to save bandwidth.",
    "GCI32: Initialize builders/buffers with the appropriate size to avoid resizing.",
    "GCI35: Use logical tests instead of `try...catch` for `FileNotFoundException` to save CPU cycles and RAM.",
    "GCI36: Avoid autoplay for video and audio content to conserve energy.",
    "GCI522: Avoid overriding brightness settings to conserve battery life.",
    "GCI523: Use minimum precision for geolocation to reduce power consumption.",
    "GCI530: Avoid turning on the torch mode programmatically to save energy."
  ],
  "Expression and statements": [
    "Use official social media sharing buttons to reduce resource-intensive JavaScript plugins.",
    "Group similar CSS declarations together to reduce CSS weight.",
    "Prefer standard fonts to save bandwidth and speed up site display.",
    "Outsource CSS and JavaScript to external files to reduce data transmission.",
    "Avoid resizing images browser-side to save bandwidth and CPU cycles.",
    "Modify the DOM outside of traversal to prevent resource-intensive loops.",
    "Avoid making DOM elements invisible by editing multiple properties to reduce repaints and reflows."
  ],
  "Others": [
    "GCI10: Use unoptimized vector images to reduce bandwidth.",
    "GCI11: Limit multiple accesses to the same DOM element to enhance performance.",
    "GCI12: Batch multiple style changes to reduce computational overhead.",
    "GCI13: Prefer API collections with pagination for efficient data handling.",
    "GCI5: Use `preparedStatement` instead of `Statement` to optimize SQL queries.",
    "GCI7: Rewrite native getters/setters to improve performance."
  ]
}